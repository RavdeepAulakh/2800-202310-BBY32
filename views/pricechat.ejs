<%- include("templates/header") %> <!-- Including a header template -->

<body>
    <div class="max-w-md mx-auto bg-gray-200 rounded-lg p-4 mt-16 flex flex-col items-center option"> <!-- Added 'mt-16' class for top margin -->
        <h1 class="text-2xl mb-4">Price Predicting Chatbot</h1>
        <div id="chat-container" class="flex flex-col gap-2 items-start"></div>
        <!-- A container for displaying chat messages -->
        <!-- It will be populated dynamically using JavaScript -->

        <form id="message-form" class="flex gap-2 mt-4">
          <input id="message-input" type="text" class="flex-1 border-gray-300 border p-2 rounded" placeholder="Type your message...">
          <button type="submit" class="bg-purple-600 text-white px-4 py-2 rounded hov">Send</button>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- Including Axios library for making HTTP requests -->

    <script>
        const chatContainer = document.getElementById('chat-container');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');

        appendMessage('assistant', '<%= initialMessage %>');
        // Append the initial message from the server-side

        messageForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const message = messageInput.value.trim();
            // Get the trimmed value of the message input

            if (message !== '') {
                // If the message is not empty
                appendMessage('user', message);
                // Append the user's message to the chat container
                messageInput.value = '';
                // Clear the message input field

                try {
                    const response = await axios.post('/priceChat', { message });
                    // Send an HTTP POST request to the server endpoint '/priceChat' with the message

                    if (response.data.redirect) {
                        // If the server sends a redirect signal
                        window.location = response.data.redirect;
                        // Manually redirect the page to the specified URL
                    } else {
                        const reply = response.data.reply;
                        // Extract the reply from the response data
                        appendMessage('assistant', reply);
                        // Append the assistant's reply to the chat container
                    }
                } catch (error) {
                    console.error(error);
                    // Log any errors to the console
                    appendMessage('assistant', 'An error occurred please resend your message.');
                    // Display an error message in the chat container
                }
            }
        });

        function appendMessage(role, content) {
            // Function to append a new message to the chat container

            const messageElement = document.createElement('div');
            // Create a new div element

            messageElement.classList.add('rounded', 'p-2');
            // Add some styling classes to the message element

            messageElement.textContent = content;
            // Set the content of the message element as the message content

            if (role === 'user') {
                messageElement.classList.add('bg-purple-600', 'text-white', 'self-end');
                // If the role is 'user', add user-specific styling classes
            } else {
                messageElement.classList.add('bg-gray-300', 'self-start');
                // Otherwise, add assistant-specific styling classes
            }

            chatContainer.appendChild(messageElement);
            // Append the message element to the chat container
        }
    </script>
</body>

</html>
